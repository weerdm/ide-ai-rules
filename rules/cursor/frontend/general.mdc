---
description: "Core frontend development patterns covering TypeScript usage, Vue.js best practices, project structure, and code organization. These patterns establish fundamental guidelines for file naming, component structure, state management, and module organization to ensure consistent and maintainable frontend development."
globs:
  - "src/**/*.{ts,vue}"
  - "src/store/**/*.ts"
  - "src/composables/**/*.ts"
  - "src/utils/**/*.ts"
  - "src/components/**/*.vue"
  - "src/components/**/index.ts"
  - "src/components/**"
alwaysApply: true
---

### Pattern: General TypeScript and Composition API Usage
src/**/*.{ts,vue}

### Rule
Use TypeScript for all new code. Prefer the Vue 3 Composition API and `<script setup>` syntax. Keep components focused on a single responsibility.

### Pattern: Store Organization
src/store/**/*.ts

### Rule
Use the `store/` directory for all Pinia or Vuex state logic. Keep state, actions, and getters in clearly separated files where appropriate.

### Pattern: Composables Organization
src/composables/**/*.ts

### Rule
Reusable logic should be placed in the `composables/` directory. Use camelCase filenames and return composables as functions.

### Pattern: Utility Functions
src/utils/**/*.ts

### Rule
Utility functions go in the `util/` directory. Files should be named using camelCase. Each function should be pure and reusable.

### Pattern: Vue Component File Naming and Structure
src/components/**/*.vue

### Rule
Vue component filenames should use PascalCase (e.g., `MyComponent.vue`). Use `<script setup lang="ts">`. Structure component files with template at the top, script in the middle, style at the bottom. Use scoped styles by default.

### Pattern: Component Index Files
src/components/**/index.ts

### Rule
Use an `index.ts` file to export multiple components within the same directory. Group related components in a feature-specific folder.

### Pattern: Import Best Practices
src/**/*.{ts,vue}

### Rule
Follow import best practices:
- Use named imports over default imports.
- Order imports: external libraries, internal modules, then relative imports.
- Use relative imports within the same feature, and `@/` for cross-feature imports.

### Pattern: Feature-based Folder Organization
src/components/**

### Rule
Use feature-based folder organization. Shared or global components should go directly under `src/components/`. Feature-specific components should be in subfolders like `src/components/my-feature/`.
